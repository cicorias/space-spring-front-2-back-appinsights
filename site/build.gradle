plugins {
	id 'org.springframework.boot' version '2.5.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "com.github.node-gradle.node" version "3.1.0"
	id 'java'
}

group = 'wt.app'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
  agentlib
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
  // https://mvnrepository.com/artifact/com.microsoft.azure/applicationinsights-agent
  // implementation 'com.microsoft.azure:applicationinsights-agent:3.1.1'

  agentlib 'com.microsoft.azure:applicationinsights-agent:3.1.1'
}

test {
	useJUnitPlatform()
}

// ### AI
task copyAgentLib(type: Copy) {
    from configurations.agentlib
    into "build/libs"
}

//bootJar.finalizedBy(copyAgentLib)
//build.finalizedBy(copyAgentLib)

// ### mostly node and react ###
// NOTE: this is the location where the react app is
def webappPath = "${project.projectDir}/src/main/webapp"

node {
    // NOTE: see ;https://github.com/node-gradle/gradle-node-plugin/blob/3.1.0/docs/usage.md
    // Whether to download and install a specific Node.js version or not
    // If false, it will use the globally installed Node.js
    // If true, it will download node using above parameters
    // Note that npm is bundled with Node.js
    download = true
    
    // Version of node to download and install (only used if download is true)
    // It will be unpacked in the workDir
    version = "12.14.1"
    
    // Version of npm to use
    // If specified, installs it in the npmWorkDir
    // If empty, the plugin will use the npm command bundled with Node.js
    npmVersion = "6.14.8"
    
    // Version of Yarn to use
    // Any Yarn task first installs Yarn in the yarnWorkDir
    // It uses the specified version if defined and the latest version otherwise (by default)
    yarnVersion = "1.22.11"
    
    // Base URL for fetching node distributions
    // Only used if download is true
    // Change it if you want to use a mirror
    // Or set to null if you want to add the repository on your own.
    distBaseUrl = "https://nodejs.org/dist"
 
    // The directory where Node.js is unpacked (when download is true) 
    workDir = file("${webappPath}/.gradle/nodejs")
    
    // The directory where npm is installed (when a specific version is defined)
    npmWorkDir = file("${webappPath}/.gradle/npm")
    
    // The directory where yarn is installed (when a Yarn task is used)
    yarnWorkDir = file("${webappPath}/.gradle/yarn")
    
    // The Node.js project directory location
    // This is where the package.json file and node_modules directory are located
    // By default it is at the root of the current project
    nodeProjectDir = file("${webappPath}")
    
    // Whether the plugin automatically should add the proxy configuration to npm and yarn commands
    // according the proxy configuration defined for Gradle
    // Disable this option if you want to configure the proxy for npm or yarn on your own
    // (in the .npmrc file for instance)
    nodeProxySettings = ProxySettings.SMART
}

def reactscripts = project.file('src/main/webapp/node_modules/.bin/react-scripts')

task buildReactApp(type: NodeTask, group: 'reactApp', description: 'build the react app') {
  script = reactscripts
  args = ['build']
}

task deployReactApp(type: Copy, group: 'reactApp', dependsOn: buildReactApp, description: 'dist to the static') {
  from "${webappPath}/build"
  into "${webappPath}/../../../build/resources/main/static"
}

task testReactApp(type: NodeTask, group: 'reactApp', description: 'test the react app') {
    script = reactscripts
    args = ['test', '--watchAll=false']
}

processResources.dependsOn buildReactApp

deployReactApp.finalizedBy(copyAgentLib)
//clean.delete << file('node_modules')
clean.delete << file("${webappPath}/build")

// TODO: these tasks create orphans that only can be killed via 'kill pid'
// SEE: https://github.com/node-gradle/gradle-node-plugin/issues/65
// task startReactApp(type: NodeTask, group: 'reactApp', description: 'start the react dev server') {
//     script = reactscripts
// 		execOverrides {
//     	it.workingDir = 'src/main/webapp'
// 		}
//     args = ['start']
// }

// Note: after an eject you speak to webpack direct
// task buildReactAppWebPack(type: NodeTask) {
//   script = project.file('node_modules/webpack/bin/webpack.js')
//   args = [
//           '--mode', 'development',
//           '--entry', './src/main/webapp/javascript/Main.jsx',
//           '-o', './src/main/resources/static/dist'
//   ]
// }
